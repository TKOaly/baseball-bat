import {
  DialogBase,
  DialogContent,
  DialogFooter,
  DialogHeader,
} from '../../components/dialog';
import { Button } from '@bbat/ui/button';
import { Table } from '@bbat/ui/table';
import { InternalIdentity, Report } from '@bbat/common/src/types';
import { format } from 'date-fns/format';
import { parseISO } from 'date-fns/parseISO';
import { CheckCircle, ExternalLink, Loader, XCircle } from 'react-feather';
import { useGetPayerQuery } from '../../api/payers';
import { Link } from 'wouter';
import { ReactNode } from 'react';
import reportApi from '../../api/report';

type Params = {
  onClose: () => void;
  reports: Array<Omit<Report, 'history'>>;
};

const UserLink = ({ id }: { id: InternalIdentity }) => {
  const { data: user } = useGetPayerQuery(id.value);

  return (
    <Link
      onClick={e => e.stopPropagation()}
      to={`/admin/payers/${id.value}`}
      className="flex items-center gap-1"
    >
      {user?.name} <ExternalLink className="h-4 text-blue-500" />
    </Link>
  );
};

export const ReportHistoryDialog = ({ onClose, reports }: Params) => {
  const [getReportLink] = reportApi.endpoints.getReportLink.useLazyQuery();

  return (
    <DialogBase wide onClose={() => onClose()}>
      <DialogHeader>Report version history</DialogHeader>
      <DialogContent>
        <Table
          hideTools
          rows={(reports ?? []).map(r => ({ ...r, key: r.id }))}
          initialSort={{
            column: 'Revision',
            direction: 'asc',
          }}
          columns={[
            {
              name: 'Revision',
              getValue: 'revision',
            },
            {
              name: 'Name',
              getValue: 'name',
            },
            {
              name: 'Generated at',
              getValue: 'generatedAt',
              render: generatedAt =>
                format(parseISO(generatedAt), 'dd.MM.yyyy HH:mm'),
            },
            {
              name: 'Generated by',
              getValue: 'generatedBy',
              render: generatedBy =>
                generatedBy ? <UserLink id={generatedBy} /> : 'Unknown', // format(parseISO(generatedAt), 'dd.MM.yyyy HH:mm'),
            },
            {
              name: 'Status',
              getValue: 'status',
              render: status => (
                <div className="flex items-center gap-1">
                  {
                    (
                      {
                        generating: (
                          <Loader className="h-4 animate-[spin_3s_linear_infinite] text-blue-600" />
                        ),
                        failed: <XCircle className="h-4 text-red-600" />,
                        finished: (
                          <CheckCircle className="h-4 text-green-600" />
                        ),
                      } as Record<string, ReactNode>
                    )[status]
                  }
                  {status[0].toUpperCase() + status.substring(1)}
                </div>
              ),
            },
            {
              name: '',
              getValue: report => report,
              render: report => (
                <div className="flex gap-3">
                  <Button
                    disabled={report.status !== 'finished'}
                    small
                    onClick={async () => {
                      const result = await getReportLink(report.id);

                      if (result?.data?.url) {
                        window.open(result.data.url, '_blank');
                      }
                    }}
                  >
                    View
                  </Button>
                </div>
              ),
            },
          ]}
        />
      </DialogContent>
      <DialogFooter>
        <Button onClick={() => onClose()}>Close</Button>
      </DialogFooter>
    </DialogBase>
  );
};
